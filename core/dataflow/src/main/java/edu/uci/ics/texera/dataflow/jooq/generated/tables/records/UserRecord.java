/*
 * This file is generated by jOOQ.
 */
package edu.uci.ics.texera.dataflow.jooq.generated.tables.records;


import edu.uci.ics.texera.dataflow.jooq.generated.tables.User;
import edu.uci.ics.texera.dataflow.jooq.generated.tables.interfaces.IUser;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRecord extends UpdatableRecordImpl<UserRecord> implements Record2<String, UInteger>, IUser {

    private static final long serialVersionUID = -554291396;

    /**
     * Setter for <code>texera_db.user.name</code>.
     */
    @Override
    public void setName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>texera_db.user.name</code>.
     */
    @Override
    public String getName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>texera_db.user.uid</code>.
     */
    @Override
    public void setUid(UInteger value) {
        set(1, value);
    }

    /**
     * Getter for <code>texera_db.user.uid</code>.
     */
    @Override
    public UInteger getUid() {
        return (UInteger) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, UInteger> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, UInteger> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return User.USER.NAME;
    }

    @Override
    public Field<UInteger> field2() {
        return User.USER.UID;
    }

    @Override
    public String component1() {
        return getName();
    }

    @Override
    public UInteger component2() {
        return getUid();
    }

    @Override
    public String value1() {
        return getName();
    }

    @Override
    public UInteger value2() {
        return getUid();
    }

    @Override
    public UserRecord value1(String value) {
        setName(value);
        return this;
    }

    @Override
    public UserRecord value2(UInteger value) {
        setUid(value);
        return this;
    }

    @Override
    public UserRecord values(String value1, UInteger value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUser from) {
        setName(from.getName());
        setUid(from.getUid());
    }

    @Override
    public <E extends IUser> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRecord
     */
    public UserRecord() {
        super(User.USER);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(String name, UInteger uid) {
        super(User.USER);

        set(0, name);
        set(1, uid);
    }
}
